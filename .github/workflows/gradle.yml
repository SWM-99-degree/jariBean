# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle 

on:
  push:
    branches: [ "main" , "CICD"]

env:
  DOCKER_IMAGE: chlrltjd5263/jaribean
  VERSION: ${{ github.sha }}
  NAME: jaribean

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      MONGODB_URI: ${{secrets.MONGO_URL}}

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
      
    - name: Setup docker buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
        
    - name: Cache docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ env.VERSION }}
        restore-keys: |
          ${{ runner.os }}-buildx-
        
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: |
        ./gradlew build -x test
        ./gradlew test
    - uses: actions/upload-artifact@v3
      with:
        name: Package
        path: build/libs
        
    - name: Build with Gradle
      run: |
        cp ./build/libs/jariBean-0.0.1-SNAPSHOT.jar app.jar
        ls -R
    
    - name: Build Docker image
      if: contains(github.ref, 'CICD')
      run: |
        ls
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASS }}
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .
        docker push ${{ env.DOCKER_IMAGE }}:latest

        
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-jaribean ]
    # label-jaribean 라는 이름으로 AWS EC2 가 Runner 를 작동시킬 때 사용했던 그 label
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Docker run
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASS }}
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          aws s3 cp s3://jaribean-env/spring/.env ~/spring_env/
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker create -p 8080:8080 --name ${{ env.NAME }} ${{ env.DOCKER_IMAGE }}:latest
          docker cp ~/spring_env/.env ${{ env.NAME }}:/
          docker start ${{ env.NAME }}

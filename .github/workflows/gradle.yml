# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle 

on:
  push:
    branches: [ "main" , "CICD"]
  pull_request:
    branches: [ "main" , "CICD"]

env:
  DOCKER_IMAGE: ghcr.io/swm-99-degree/jaribean
  VERSION: ${{ github.sha }}
  NAME: jaribean

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    - name: Build with Gradle
      run: |
        ./gradlew build -x test
        ls -R
      
     
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Create Build Directory
      run: |
        mkdir -p build/libs
        pwd
        ls -al
        cd build/libs
        ls -al

      
    - name: Setup docker buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
        
    - name: Cache docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ env.VERSION }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to ghcr
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: docker-context/
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest

        
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-jaribean ]
    # label-jaribean 라는 이름으로 AWS EC2 가 Runner 를 작동시킬 때 사용했던 그 label
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          aws s3 cp s3://jaribean-env/spring/.env ~/spring_env/
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker create --name ${{ env.NAME }} ${{ env.DOCKER_IMAGE }}:latest
          docker cp ~/spring_env/.env ${{ env.NAME }}:/
          docker start -d -p 8080:8080 --name ${{ env.NAME }}
